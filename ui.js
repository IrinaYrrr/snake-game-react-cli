const React = require('react');
const { Text, Box, useStdin } = require('ink');
const { useState, useEffect } = require('react');
const useInterval = require('./useInterval');
const importJsx = require('import-jsx');
const EndScreen = importJsx('./endScreen');

// –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –∫–æ–¥–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const ARROW_UP = "\u001B[A";
const ARROW_DOWN = "\u001B[B";
const ARROW_RIGHT = "\u001B[C";
const ARROW_LEFT = "\u001B[D";

// –†–∞–∑–º–µ—Ä –ø–æ–ª—è
const FIELD_SIZE = 16;
// –†—è–¥ –ø–æ–ª—è - —Å–æ–¥–µ—Ä–∂–∏—Ç —è—á–µ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];

// –•—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ–¥—ã
let foodItem = {
	x: Math.floor(Math.random() * FIELD_SIZE),
	y: Math.floor(Math.random() * FIELD_SIZE),
}

// –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏
const DIRECTION = {
	RIGHT: { x: 1, y: 0 },
	LEFT: { x: -1, y: 0 },
	TOP: { x: 0, y: -1 },
	BOTTOM: { x: 0, y: 1 },
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –µ–¥—ã –∏–ª–∏ –∑–º–µ–π–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã, –∑–º–µ–∏ –∏–ª–∏ —Ç–æ—á–∫–∏.
function getItem(x, y, snakeSegments) {
	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –µ–¥—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–¥—É.
	if (foodItem.x === x && foodItem.y === y) {
		return <Text color='red'>üçè</Text>
	}

	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑–º–µ–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–º–µ—é.
	for (const segment of snakeSegments) {
		if (segment.x === x && segment.y === y) {
			return <Text color='green'>üüß</Text>
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –µ–¥–∞ –∏ –Ω–µ –∑–º–µ–π–∫–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫—É
	return <Text> . </Text>
}

// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ª—è:
function limitByField(j) {
	if (j >= FIELD_SIZE) {
		return 0;
	}
	if (j < 0) {
		return FIELD_SIZE - 1;
	}
	return j;
}

// –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏:
function newSnakePosition(segments, direction) {
	const [head] = segments;
	const newHead = {
		x: limitByField(head.x + direction.x),
		y: limitByField(head.y + direction.y)
	};
	if (collidesWithFood(newHead, foodItem)) {
		foodItem = {
			x: Math.floor(Math.random() * FIELD_SIZE),
			y: Math.floor(Math.random() * FIELD_SIZE),
		};
		return [newHead, ...segments];
	};
	return [newHead, ...segments.slice(0, -1)];
}

function collidesWithFood(head, foodItem) {
	return head.x === foodItem.x && head.y === foodItem.y
}


const App = () => {
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–º–µ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ö—É–∫ 'useState':
	const [snakeSegments, setSnakeSegments] = useState([
		{ x: 8, y: 6 },
		{ x: 8, y: 7 },
		{ x: 8, y: 8 },
	]);

	// –ó–∞–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–∏:
	const [direction, setDirection] = useState(DIRECTION.LEFT);

	const { stdin, setRawMode } = useStdin();

	useEffect(() => {
		setRawMode(true);
		stdin.on("data", data => {
			const value = data.toString();
			if (value == ARROW_UP) {
				setDirection(DIRECTION.TOP);
			}
			if (value == ARROW_DOWN) {
				setDirection(DIRECTION.BOTTOM);
			}
			if (value == ARROW_LEFT) {
				setDirection(DIRECTION.LEFT);
			}
			if (value == ARROW_RIGHT) {
				setDirection(DIRECTION.RIGHT);
			}
		});
	}, []);

	const [head, ...tail] = snakeSegments;

	const intersectsWithItSelf = tail.some(segment => segment.x === head.x && segment.y === head.y
	);


	useInterval(() => {
		setSnakeSegments(segments => newSnakePosition(segments, direction))
	}, intersectsWithItSelf ? null : 200);




	return (
		<Box flexDirection='column' alignItems='center'>
			<Text>
				<Text color="green">Snake</Text> game
				</Text>
			{intersectsWithItSelf ? (
				<EndScreen size={FIELD_SIZE}/>
			) : (
				/* –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */
				<Box flexDirection='column'>
					{/* —Ä–∏—Å—É–µ–º –¥–≤—É—Ö–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ */}
					{FIELD_ROW.map(y => (
						// —Å—Ç–æ–ª–±—Ü—ã; key - —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ FIELD_SIZE
						<Box key={y}>
							{FIELD_ROW.map(x => (
								// —Å—Ç—Ä–æ–∫–∏; key - —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ FIELD_SIZE
								<Box key={x}>
									<Text> {getItem(x, y, snakeSegments)} </Text>
								</Box>
							))}
						</Box>
					))}
				</Box>
			)}


		</Box>
	);
};

module.exports = App;