const React = require('react');
const { Text, Box, useStdin } = require('ink');
const { useState, useEffect } = require('react');
const useInterval = require('./useInterval');
const importJsx = require('import-jsx');
const EndScreen = importJsx('./endScreen');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –∫–æ–¥–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const ARROW_UP = "\u001B[A";
const ARROW_DOWN = "\u001B[B";
const ARROW_RIGHT = "\u001B[C";
const ARROW_LEFT = "\u001B[D";

// –†–∞–∑–º–µ—Ä –ø–æ–ª—è
const FIELD_SIZE = 16;

// –†—è–¥ –ø–æ–ª—è - —Å–æ–¥–µ—Ä–∂–∏—Ç —è—á–µ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];

// –•—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ–¥—ã
let foodItem = newFoodItem();

// –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ–¥—ã 
function newFoodItem() {
    return {
        x: Math.floor(Math.random() * FIELD_SIZE),
        y: Math.floor(Math.random() * FIELD_SIZE),
    };
}

// –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏
const DIRECTION = {
    RIGHT: { x: 1, y: 0 },
    LEFT: { x: -1, y: 0 },
    TOP: { x: 0, y: -1 },
    BOTTOM: { x: 0, y: 1 },
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –µ–¥—ã –∏–ª–∏ –∑–º–µ–π–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã, –∑–º–µ–∏ –∏–ª–∏ —Ç–æ—á–∫–∏
function getItem(x, y, snakeSegments) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –µ–¥—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–¥—É
    if (foodItem.x === x && foodItem.y === y) {
        return <Text>üê≠</Text>
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑–º–µ–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–º–µ—é
    for (const segment of snakeSegments) {
        if (segment.x === x && segment.y === y) {
            return <Text>üêç</Text>
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –µ–¥–∞ –∏ –Ω–µ –∑–º–µ–π–∫–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫—É
    return <Text> . </Text>
}

// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ª—è. j - —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
function limitByField(j) {
    if (j >= FIELD_SIZE) {
        return 0;
    }
    if (j < 0) {
        return FIELD_SIZE - 1;
    }
    return j;
}

// –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏.
// segments - —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–º–µ–π–∫–∏
// direction - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
function newSnakePosition(segments, direction) {
    // head -–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã –∑–º–µ–π–∫–∏
    const [head] = segments;
    // –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã –∑–º–µ–π–∫–∏
    const newHead = {
        x: limitByField(head.x + direction.x),
        y: limitByField(head.y + direction.y)
    };
    // E—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –µ–¥–æ–π, –∑–º–µ–π–∫–∞ —Ä–∞—Å—Ç–µ—Ç
    if (eatFood(newHead, foodItem)) {
        foodItem = newFoodItem();
        return [newHead, ...segments];
    };
    //–ù–µ —Å—ä–µ–ª–∏ –µ–¥—É - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - –≥–æ–ª–æ–≤–∞ + –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    return [newHead, ...segments.slice(0, -1)];
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ –º—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –µ–¥–æ–π 
// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã –∏ –µ–¥—ã –∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
function eatFood(head, foodItem) {
    if (head.x === foodItem.x && head.y === foodItem.y) {
        return true;
    }
    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–µ—Ä–ª–∞ –ª–∏ –∑–º–µ–π–∫–∞
function isSnakeDead(segments) {
    const [head, ...tail] = segments;
    const snakeEatItSelf = tail.find(segment => segment.x === head.x && segment.y === head.y);
    if (snakeEatItSelf) {
        return true;
    }
    return false;
}



// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è:
const App = () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–º–µ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ö—É–∫ 'useState':
    const [snakeSegments, setSnakeSegments] = useState([
        { x: 8, y: 6 },
        { x: 8, y: 7 },
        { x: 8, y: 8 },
    ]);

    // –ó–∞–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–∏:
    const [direction, setDirection] = useState(DIRECTION.LEFT);

    const { stdin, setRawMode } = useStdin();

    useEffect(() => {
        setRawMode(true);
        stdin.on("data", data => {
            const value = data.toString();
            if (value == ARROW_UP) {
                setDirection(DIRECTION.TOP);
            }
            if (value == ARROW_DOWN) {
                setDirection(DIRECTION.BOTTOM);
            }
            if (value == ARROW_LEFT) {
                setDirection(DIRECTION.LEFT);
            }
            if (value == ARROW_RIGHT) {
                setDirection(DIRECTION.RIGHT);
            }
        });
    }, []);

    const snakeDead = isSnakeDead(snakeSegments);

    // –¢–∞–π–º–µ—Ä –≤ —Ä–µ–∞–∫—Ç–µ —Å —Ö—É–∫–∞–º–∏
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–º–µ–π–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    useInterval(() => {
        setSnakeSegments(segments => newSnakePosition(segments, direction))
    }, snakeDead ? null : 200);


    return (
        <Box flexDirection='column' alignItems='center'>
            <Text>
                <Text color="green">Snake</Text> game
				</Text>
            {snakeDead ? (
                <EndScreen size={FIELD_SIZE} />
            ) : (
                /* –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */
                <Box flexDirection='column'>
                    {/* —Ä–∏—Å—É–µ–º –¥–≤—É—Ö–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ */}
                    {FIELD_ROW.map(y => (
                        // —Å—Ç–æ–ª–±—Ü—ã; key - —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ FIELD_SIZE
                        <Box key={y}>
                            {FIELD_ROW.map(x => (
                                // —Å—Ç—Ä–æ–∫–∏; key - —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ FIELD_SIZE
                                <Box key={x}>
                                    <Text> {getItem(x, y, snakeSegments)} </Text>
                                </Box>
                            ))}
                        </Box>
                    ))}
                </Box>
            )}


        </Box>
    );
};

module.exports = App;